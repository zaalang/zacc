//
// test
//

import std.stdio;
import std.list;
import std.dyn;

pub vtable Animal
{
  pub fn eat(this &) -> void;
}

struct Herbivore
{
  f32 i;

  fn eat(this &) -> void
  {
    std::print("Herbivore: ", this.i);
  }

  Herbivore(f32 i) : i(i) {}
  Herbivore(Herbivore&&) = default;
  ~Herbivore() = default;
}

struct Carnivore
{
  f32 i;

  fn eat(this &) -> void
  {
    std::print("Carnivore: ", this.i);
  }

  Carnivore(f32 i) : i(i) {}
  Carnivore(Carnivore&&) = default;
  ~Carnivore() = default;
}

fn main
{
  var animals = std::vector<std::dyn<Animal>>();

  animals.push_back(Herbivore(1.2));
  animals.push_back(Carnivore(2.3));

  std::print(animals);

  for (var &animal : animals)
    animal.eat(animal.self);
}
