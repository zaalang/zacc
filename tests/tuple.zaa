import std.stdio;
import std.vector;

using std;

fn test_empty()
{
  var c = ();
  assert(c.len == 0);
}

fn test_tie()
{
  var a = i8(11);
  var b = 'x';
  var c = std::tuple(a, b);

  std::tie(a, b) = (99, 'y');

  assert(a == 99 && b == 'y');
  assert(c.0 == 11 && c.1 == 'x');
}

fn test_cat()
{
  var a = ('a', true);
  var b = ('b', false);
  var c = std::tuple_cat(a, b);

  assert(c.len == 4);
  assert(c.0 == 'a' && c.1 == true && c.2 == 'b' && c.3 == false);
}

fn test_subset()
{
  var a = ('a', true, 'b', false);
  var c = std::tuple_subset(a, 1 .. 3);

  assert(c.len == 2);
  assert(c.0 == true && c.1 == 'b');
}

fn test_as_tuple()
{
  struct as_tuple_t<T>
  {
    #{                                    // compile time block in declaritive context
      var tuple = $typeof(());            // type reflection of empty tuple

      #for (const k : std::meta::fields_of($T))
        tuple = std::meta::tuple_append(tuple, $T::#k);  // append reflection of field

      -> { using type = $(tuple); }       // injection of type alias into struct scope
    }
  }

  using as_tuple<T> = as_tuple_t<T>::type;

  struct X
  {
    i32 i;
    f64 j;
    bool k;
  }

  std::assert(std::is_same<as_tuple<X>, (i32, f64, bool)>);
  std::assert(std::is_same<as_tuple<X>, (X...,)>);
}

fn test_as_soa()
{
  struct vec3
  {
    float x;
    float y;
    float z;
  }

  struct soa<T, N>
  {
    #{
      #for (const k : std::meta::fields_of($T))
        -> { $($typeof(T::#k))[N] $(std::meta::name_of(k)); }
    }

    soa() = default;
    ~soa() = default;
  }

  var vec3x4 = soa<vec3, 4>();

  std::assert(vec3x4.x.len == 4);
  std::assert(vec3x4.y.len == 4);
  std::assert(vec3x4.z.len == 4);
}

fn test_soa_vector()
{
  struct soa_vector<T>
  {
    pub fn push_back(this mut &, T &value) -> void
    {
      #for (const k = 0; k != std::meta::fields_of($T).len; ++k)
        this.#k.push_back(value.#k);
    }

    pub fn [](this &, usize index) -> T
    {
      var value = T(void);

      #for (const k = 0; k != std::meta::fields_of($T).len; ++k)
        new<typeof(value.#k)>(&value.#k)(this.#k[index]);

      return value;
    }

    #{
      #for (const k : std::meta::fields_of($T))
        -> { pub std::vector<$($typeof(T::#k))> $(std::meta::name_of(k)); }
    }

    pub soa_vector() = default;
    pub ~soa_vector() = default;
  }

  struct X
  {
    i32 i = 1;
    f64 j = 2.2;
    bool k = true;

    X() = default;
    ~X() = default;
  }

  var soa = soa_vector<X>();

  soa.push_back(X());

  std::assert(soa.i.len == 1);
  std::assert(soa.j.len == 1);
  std::assert(soa.k.len == 1);
}

fn main()
{
  #test_empty();
  #test_tie();
  #test_cat();
  #test_subset();
  #test_as_tuple();
  #test_as_soa();
  #test_soa_vector();
}
