import std.stdio;
import std.array;
import std.range;

using std;

fn test_iota()
{
  var v = std::iota(3, 12);
  assert(v.len == 9);
  assert(std::distance(v.begin, v.end) == 9);
  assert(*v.begin == 3);
  assert(*std::next(v.begin, 5) == 8);
  assert(v[1] == 4);
  assert(v[4] == 7);
  assert(v.front == 3);
  assert(v.back == 11);
}

fn test_repeat()
{
  var v = std::repeat(3, 9);
  assert(v.len == 9);
  assert(std::distance(v.begin, v.end) == 9);
  assert(v[0] == 3);
  assert(v[5] == 3);
  assert(v.front == 3);
  assert(v.back == 3);
}

fn test_cycle()
{
  var v = std::cycle([1, 2]);
  assert(v.take_n(6) == [1, 2, 1, 2, 1, 2]);
  assert(v[0] == 1);
  assert(v[5] == 2);
  assert(v.front == 1);
}

fn test_reverse()
{
  var c = std::array<int>([1, 2, 3, 4, 5]);
  var v = std::reverse(c);
  assert(v.len == c.len);
  assert(std::distance(v.begin, v.end) == 5);
  assert(v[0] == c.back);
  assert(v[v.len - 1] == c.front);
  assert(v.front == 5);
  assert(v.back == 1);
}

fn test_filter()
{
  var c = std::array<int>([1, 2, 3, 4, 5]);
  var v = std::filter(c, fn(var k) { return k % 2 != 0; });
  assert(std::distance(v.begin, v.end) == 3);
  assert(v == [1, 3, 5]);
  assert(v.front == 1);
}

fn test_transform()
{
  var c = std::array<int>([1, 2, 3, 4, 5]);
  var v = std::transform(c, fn(var k) { return k * k; });
  assert(v.len == c.len);
  assert(std::distance(v.begin, v.end) == 5);
  assert(v == [1, 4, 9, 16, 25]);
  assert(v[3] == c[3] * c[3]);
  assert(v.front == 1);
  assert(v.back == 25);
}

fn test_zip()
{
  var c = std::array<int>([1, 2, 3, 4, 5]);
  var n = std::array<char>(['1', '2', '3', '4', '5']);
  var v = std::zip(c, n);
  assert(v.len == 5);
  assert(std::distance(v.begin, v.end) == 5);
  assert(v[3].0 == 4);
  assert(v[3].1 == '4');
  assert(v.front == (1, '1'));
  assert(v.back == (5, '5'));
}

fn main()
{
  #test_iota();
  #test_repeat();
  #test_cycle();
  #test_reverse();
  #test_filter();
  #test_transform();
  #test_zip();
}
